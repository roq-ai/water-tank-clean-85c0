generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?          @db.VarChar(255)
  address        String?          @db.VarChar(255)
  city           String?          @db.VarChar(255)
  state          String?          @db.VarChar(255)
  zip_code       String?          @db.VarChar(255)
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  user_id        String           @db.Uuid
  tenant_id      String           @db.VarChar(255)
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  representative representative[]
  request        request[]
  service        service[]
}

model customer {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name String    @db.VarChar(255)
  last_name  String    @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  address    String    @db.VarChar(255)
  city       String    @db.VarChar(255)
  state      String    @db.VarChar(255)
  zip_code   String    @db.VarChar(255)
  user_id    String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  request    request[]
}

model representative {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name String   @db.VarChar(255)
  last_name  String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  company_id String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model request {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status      String   @db.VarChar(255)
  service_id  String   @db.Uuid
  customer_id String   @db.Uuid
  company_id  String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  company     company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customer    customer @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  service     service  @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model service {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  price       Int
  duration    Int
  company_id  String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  request     request[]
  company     company   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String           @unique @db.VarChar(255)
  firstName      String?          @db.VarChar(255)
  lastName       String?          @db.VarChar(255)
  roq_user_id    String           @db.VarChar(255)
  tenant_id      String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  company        company[]
  customer       customer[]
  representative representative[]
}
